// Generated by CoffeeScript 2.4.1
(function() {
  var $, _, _ERR, __, all, cc, colorsStatic, defaultUnit, empty, getBaseStyleMaps, join, map, match, none, qq, qqq, repeat, replace, reverse, split, tap, test, tryParseNum, type;

  __ = require('ramda/src/__');

  all = require('ramda/src/all');

  empty = require('ramda/src/empty');

  join = require('ramda/src/join');

  map = require('ramda/src/map');

  match = require('ramda/src/match');

  none = require('ramda/src/none');

  repeat = require('ramda/src/repeat');

  replace = require('ramda/src/replace');

  reverse = require('ramda/src/reverse');

  split = require('ramda/src/split');

  tap = require('ramda/src/tap');

  test = require('ramda/src/test');

  type = require('ramda/src/type');

  ({cc, $} = require('ramda-extras')); //auto_require: ramda-extras

  qq = function(f) {
    return console.log(match(/return (.*);/, f.toString())[1], f());
  };

  qqq = function(...args) {
    return console.log(...args);
  };

  _ = function(...xs) {
    return xs;
  };

  _ERR = 'Shortstyle: ';

  colorsStatic = require('./colors');

  //##### Probably no need to override:
  defaultUnit = function(x) {
    if ('Number' === type(x)) {
      return x + 'px';
    } else {
      return x;
    }
  };

  tryParseNum = function(x) {
    if (isNaN(x)) {
      return x;
    } else {
      return Number(x);
    }
  };

  getBaseStyleMaps = function(unit = defaultUnit, colors) {
    var _oneTwoFour, als, bare, basi, baurl, bg, borb, bord, border, borl, borr, bort, bot, br, cur, dis, f, h, ih, iw, jus, lef, lh, ls, m, mb, ml, mr, mt, op, ov, p, pb, pl, pos, pr, pt, rig, rot, scale, sh, ta, td, top, tov, transform, ttra, usel, vis, w, wh, ww, x, xb, xg, xh, xs, xw, z;
    //##### UNIT BASED

    // height
    h = function(x) {
      return {
        height: unit(x)
      };
    };
    // width
    w = function(x) {
      return {
        width: unit(x)
      };
    };
    // min/max-height
    ih = function(x) {
      return {
        minHeight: unit(x)
      };
    };
    xh = function(x) {
      return {
        maxHeight: unit(x)
      };
    };
    // min/max-width
    iw = function(x) {
      return {
        minWidth: unit(x)
      };
    };
    xw = function(x) {
      return {
        maxWidth: unit(x)
      };
    };
    // left, top, right, bottom
    lef = function(x) {
      return {
        left: unit(x)
      };
    };
    rig = function(x) {
      return {
        right: unit(x)
      };
    };
    top = function(x) {
      return {
        top: unit(x)
      };
    };
    bot = function(x) {
      return {
        bottom: unit(x)
      };
    };
    _oneTwoFour = function(key) {
      return function(x) {
        if (type(x) === 'Number') {
          return {
            [`${key}`]: unit(x)
          };
        } else {
          return {
            [`${key}`]: cc(join(' '), map(unit), map(tryParseNum), split(' '), x)
          };
        }
      };
    };
    m = _oneTwoFour('margin');
    m.refine = function(x) {
      return replace(/_/g, ' ', x);
    };
    p = _oneTwoFour('padding');
    p.refine = function(x) {
      return replace(/_/g, ' ', x);
    };
    mt = function(x) {
      return {
        marginTop: unit(x)
      };
    };
    mb = function(x) {
      return {
        marginBottom: unit(x)
      };
    };
    ml = function(x) {
      return {
        marginLeft: unit(x)
      };
    };
    mr = function(x) {
      return {
        marginRight: unit(x)
      };
    };
    pt = function(x) {
      return {
        paddingTop: unit(x)
      };
    };
    pb = function(x) {
      return {
        paddingBottom: unit(x)
      };
    };
    pl = function(x) {
      return {
        paddingLeft: unit(x)
      };
    };
    pr = function(x) {
      return {
        paddingRight: unit(x)
      };
    };
    // border-radius
    br = _oneTwoFour('borderRadius');
    br.refine = function(x) {
      return replace(/_/g, ' ', unit(x));
    };
    lh = function(x) {
      return {
        lineHeight: unit(x)
      };
    };
    //##### NON-UNIT BASED
    bg = function(x) {
      if (x === 0) {
        return {
          backgroundColor: 'transparent'
        };
      } else {
        return {
          backgroundColor: colors(x)
        };
      }
    };
    baurl = function(url) {
      return {
        backgroundImage: `url(${url})`
      };
    };
    basi = function(x) {
      switch (x) {
        case 'n':
          return {
            backgroundSize: 'contain'
          };
        case 'v':
          return {
            backgroundSize: 'cover'
          };
        default:
          throw new Error(_ERR + `basi got invalid value: ${x}`);
      }
    };
    bare = function(x) {
      switch (x) {
        case 'n':
          return {
            backgroundRepeat: 'no-repeat'
          };
        case 'x':
          return {
            backgroundRepeat: 'repeat-x'
          };
        case 'y':
          return {
            backgroundRepeat: 'repeat-y'
          };
        default:
          throw new Error(_ERR + `bare got invalid value: ${x}`);
      }
    };
    // position
    pos = function(x) {
      switch (x) {
        case 'a':
          return {
            position: 'absolute'
          };
        case 'f':
          return {
            position: 'fixed'
          };
        case 'r':
          return {
            position: 'relative'
          };
        case 's':
          return {
            position: 'static'
          };
        case 'y':
          return {
            position: 'sticky'
          };
        default:
          throw new Error(_ERR + `pos doesn't support ${x}`);
      }
    };
    // flex-box
    x = function(v) {
      var ai, di, jc, ret, wrap;
      if (type(v) !== 'String' || v === '') {
        throw new Error(_ERR + 'x expects a non-empty string');
      }
      ret = {
        display: 'flex'
      };
      di = v[0];
      if (di === 'r') {
        ret.flexDirection = 'row';
      } else if (di === 'c') {
        ret.flexDirection = 'column';
      } else if (di === 't') {
        ret.flexDirection = 'row-reverse';
      } else if (di === 'v') {
        ret.flexDirection = 'column-reverse';
      } else {
        throw new Error(_ERR + `first char in x: '${v}' is invalid, see docs`);
      }
      jc = v[1];
      if (!jc) {
        return ret;
      }
      if (jc === 'c') {
        ret.justifyContent = 'center';
      } else if (jc === 'e') {
        ret.justifyContent = 'flex-end';
      } else if (jc === 's') {
        ret.justifyContent = 'flex-start';
      } else if (jc === 'a') {
        ret.justifyContent = 'space-around';
      } else if (jc === 'b') {
        ret.justifyContent = 'space-between';
      } else if (jc === '_') {

      } else {
        throw new Error(_ERR + `second char in x: '${v}' is invalid, see docs`);
      }
      ai = v[2];
      if (!ai) {
        return ret;
      }
      if (ai === 'b') {
        ret.alignItems = 'baseline';
      } else if (ai === 'c') {
        ret.alignItems = 'center';
      } else if (ai === 'e') {
        ret.alignItems = 'flex-end';
      } else if (ai === 's') {
        ret.alignItems = 'flex-start';
      } else if (ai === 't') {
        ret.alignItems = 'strech';
      } else if (ai === '_') {

      } else {
        throw new Error(_ERR + `third char in x: '${v}' is invalid, see docs`);
      }
      wrap = v[3];
      if (!wrap) {
        return ret;
      }
      if (wrap === 'w') {
        ret.flexWrap = 'wrap';
      } else if (wrap === 'r') {
        ret.flexWrap = 'wrap-reverse';
      } else if (wrap === '_') {

      } else {
        throw new Error(_ERR + `fourth char in x: '${v}' is invalid, see docs`);
      }
      // grow = v[4]
      // if !grow then return ret
      // if grow == '_' then # noop
      // else if isNaN parseInt grow
      // 	throw new Error _ERR + "fifth char in x: '#{v}' is invalid, see docs"
      // else ret.flexGrow = parseInt grow

      // shrink = v[5]
      // if !shrink then return ret
      // if shrink == '_' then # noop
      // else if isNaN parseInt shrink
      // 	throw new Error _ERR + "fifth char in x: '#{v}' is invalid, see docs"
      // else ret.flexShrink = parseInt shrink
      if (v[4]) {
        throw new Error(_ERR + `x only supports 6 chars '${v}', see docs`);
      }
      return ret;
    };
    // justify-self
    jus = function(x) {
      switch (x) {
        case 'b':
          return {
            justifySelf: 'baseline'
          };
        case 'c':
          return {
            justifySelf: 'center'
          };
        case 's':
          return {
            justifySelf: 'flex-start'
          };
        case 'e':
          return {
            justifySelf: 'flex-end'
          };
        case 't':
          return {
            justifySelf: 'strech'
          };
        default:
          throw new Error(_ERR + `js (justify-self) received invalid value: ${x}`);
      }
    };
    // align-self
    als = function(x) {
      switch (x) {
        case 'b':
          return {
            alignSelf: 'baseline'
          };
        case 'c':
          return {
            alignSelf: 'center'
          };
        case 's':
          return {
            alignSelf: 'flex-start'
          };
        case 'e':
          return {
            alignSelf: 'flex-end'
          };
        case 't':
          return {
            alignSelf: 'strech'
          };
        default:
          throw new Error(_ERR + `js (align-self) received invalid value: ${x}`);
      }
    };
    usel = function(x) {
      switch (x) {
        case 'n':
          return {
            userSelect: 'none',
            '-webkit-tap-highlight-color': 'none'
          };
        default:
          throw new Error(_ERR + `usel (user-select) got invalid type: ${x}`);
      }
    };
    dis = function(x) {
      switch (x) {
        case 'i':
          return {
            display: 'inline'
          };
        case 'if':
          return {
            display: 'inline-flex'
          };
        case 'b':
          return {
            display: 'block'
          };
        case 'f':
          return {
            display: 'flex'
          };
        case 'n':
          return {
            display: 'none'
          };
        default:
          throw new Error(_ERR + `dis (display) got invalid type: ${x}`);
      }
    };
    vis = function(x) {
      switch (x) {
        case 'h':
          return {
            visibility: 'hidden'
          };
        default:
          throw new Error(_ERR + `vis (visibility) got invalid type: ${x}`);
      }
    };
    xg = function(x) {
      return {
        flexGrow: parseInt(x)
      };
    };
    xs = function(x) {
      return {
        flexShrink: parseInt(x)
      };
    };
    xb = function(x) {
      return {
        flexBasis: parseInt(x) * 180 + 'rem'
      };
    };
    // text-align
    ta = function(x) {
      switch (x) {
        case 'c':
          return {
            textAlign: 'center'
          };
        case 'l':
          return {
            textAlign: 'left'
          };
        case 'r':
          return {
            textAlign: 'right'
          };
        default:
          throw new Error(_ERR + `ta (text-align) expects c, l or r, given: ${x}`);
      }
    };
    td = function(x) {
      switch (x) {
        case 'u':
          return {
            textDecoration: 'underline'
          };
        case 'n':
          return {
            textDecoration: 'none'
          };
        default:
          throw new Error(_ERR + `td (text-decoration) got invalid value ${x}`);
      }
    };
    ttra = function(x) {
      switch (x) {
        case 'u':
          return {
            textTransform: 'uppercase'
          };
        case 'l':
          return {
            textTransform: 'lowercase'
          };
        case 'c':
          return {
            textTransform: 'capitalize'
          };
      }
    };
    // ex. bordwh or bordwh_1
    bord = function(x) {
      return border('', x);
    };
    borb = function(x) {
      return border('-bottom', x);
    };
    bort = function(x) {
      return border('-top', x);
    };
    borl = function(x) {
      return border('-left', x);
    };
    borr = function(x) {
      return border('-right', x);
    };
    border = function(side, x) {
      var RE, ___, ____, clr, size;
      if (x === 0) {
        return {
          [`border${side}`]: 'none'
        };
      }
      RE = new RegExp(`^(${colorsStatic.REstr})(_(\\d))?$`);
      if (!test(RE, x)) {
        throw new Error(_ERR + `Invalid string given for border: ${x}`);
      }
      [___, clr, ____, size] = match(RE, x);
      return {
        [`border${side}`]: `${unit(size || 1)} solid ${colors(clr)}`
      };
    };
    ls = function(x) {
      return {
        letterSpacing: unit(x)
      };
    };
    // z-index
    z = function(x) {
      return {
        zIndex: x
      };
    };
    // white-space
    wh = function(x) {
      switch (x) {
        case 'n':
          return {
            whiteSpace: 'nowrap'
          };
        case 'p':
          return {
            whiteSpace: 'pre'
          };
        case 'i':
          return {
            whiteSpace: 'initial'
          };
        default:
          throw new Error(_ERR + `wh (white-space) expects n, p or i, given: ${x}`);
      }
    };
    // word-wrap
    ww = function(x) {
      switch (x) {
        case 'b':
          return {
            // https://stackoverflow.com/a/33214667/416797
            'overflow-wrap': 'break-word',
            'word-wrap': 'break-word',
            '-ms-word-break': 'break-all',
            'word-break': 'break-all',
            'word-break': 'break-word',
            '-ms-hyphens': 'auto',
            '-moz-hyphens': 'auto',
            '-webkit-hyphens': 'auto',
            'hyphens': 'auto'
          };
        default:
          throw new Error(_ERR + `ww (word-wrap) expects b, given: ${x}`);
      }
    };
    // overflow
    ov = function(x) {
      switch (x) {
        case 'a':
          return {
            overflow: 'auto'
          };
        case 's':
          return {
            overflow: 'scroll'
          };
        case 'h':
          return {
            overflow: 'hidden'
          };
        case 'v':
          return {
            overflow: 'visible'
          };
        case 'i':
          return {
            overflow: 'initial'
          };
        default:
          throw new Error(_ERR + `ove (overflow) expects a, s, h, v or i, given: ${x}`);
      }
    };
    // text-overflow
    tov = function(x) {
      switch (x) {
        case 'e':
          return {
            overflow: 'ellipsis'
          };
        case 'c':
          return {
            overflow: 'clip'
          };
        case 'i':
          return {
            overflow: 'initial'
          };
        default:
          throw new Error(_ERR + `tov (text-overflow) expects e, c, or i, given: ${x}`);
      }
    };
    op = function(x) {
      return {
        opacity: x
      };
    };
    cur = function(x) {
      switch (x) {
        case 'p':
          return {
            cursor: 'pointer'
          };
        case 'd':
          return {
            cursor: 'default'
          };
        default:
          throw new Error(_ERR + `invalid cur(sor) '${x}'`);
      }
    };
    sh = function(v) {
      var ___, blur, res, spread, y;
      if (v === 0) {
        return {
          boxShadow: 'none'
        };
      }
      res = match(/^(-?\d+)_(-?\d+)_(\d+)_(\d+)_([a-z]{2,3}(-(\d))?)$/, v);
      if (!res) {
        return warn(`Invalid string given for shadow: ${v}`);
      }
      [___, x, y, blur, spread] = $(res, map(function(s) {
        return unit(parseInt(s));
      }));
      return {
        boxShadow: `${x} ${y} ${blur} ${spread} ${colors(res[5])}`
      };
    };
    rot = function(deg, style) {
      return transform(deg, 'rotate', `rotate(${deg}deg)`, style);
    };
    scale = function(x, style) {
      return transform(x, 'scale', `scale(${x})`, style);
    };
    transform = function(x, key, full, style) {
      var re;
      if (!style.transform) {
        return {
          transform: full
        };
      } else {
        re = new RegExp(`${key}\\(.*?\\)`);
        if (test(re, style.transform)) {
          return {
            transform: replace(re, full, style.transform)
          };
        } else {
          return {
            transform: style.transform + ` ${full}`
          };
        }
      }
    };
    //#############################################################################
    //#### Functions below this line are things you'd want to override in your app:
    //#### (Implementations below are provided as inspiration / templates)

    // font
    f = function(x) {
      var RE, color, family, opacity, ret, size, weight;
      ret = {};
      if (type(x) !== 'String') {
        throw new Error(_ERR + `font expected type string, given: ${x}`);
      }
      RE = /^([a-z_])([\d]{1,2}|_)([a-z]{2,3}|__)([\d_])?$/; // family
      // size
      // color
      // weight
      if (!test(RE, x)) {
        throw new Error(_ERR + `Invalid string given for font: ${x}`);
      }
      [_, family, size, color, weight] = match(RE, x);
      switch (family) {
        case 't':
          ret.fontFamily = 'Times New Roman, Times, serif';
          break;
        case 'a':
          ret.fontFamily = 'Arial, Helvetica, sans-serif';
          break;
        case 'c':
          ret.fontFamily = 'Comic Sans MS, cursive, sans-serif';
          break;
        case '_':
          break;
        default:
          throw new Error(_ERR + `invalid family '${family}' for t: ${x}`);
      }
      switch (size) {
        case '1':
          ret.fontSize = 8 + 'px';
          break;
        case '2':
          ret.fontSize = 9 + 'px';
          break;
        case '3':
          ret.fontSize = 11 + 'px';
          break;
        case '4':
          ret.fontSize = 12 + 'px';
          break;
        case '5':
          ret.fontSize = 13 + 'px';
          break;
        case '6':
          ret.fontSize = 15 + 'px';
          break;
        case '7':
          ret.fontSize = 18 + 'px';
          break;
        case '8':
          ret.fontSize = 25 + 'px';
          break;
        case '9':
          ret.fontSize = 30 + 'px';
          break;
        case '10':
          ret.fontSize = 35 + 'px';
          break;
        case '11':
          ret.fontSize = 40 + 'px';
          break;
        case '_':
          break;
        default:
          throw new Error(_ERR + `invalid size '${size}' for t: ${x}`);
      }
      opacity = 1;
      switch (color) {
        case 'bk':
          ret.color = `rgba(0, 0, 0, ${opacity})`;
          break;
        case 'wh':
          ret.color = `rgba(255, 255, 255, ${opacity})`;
          break;
        case 're':
          ret.color = `rgba(100, 0, 0, ${opacity})`;
          break;
        case 'gn':
          ret.color = `rgba(0, 100, 0, ${opacity})`;
          break;
        case 'bu':
          ret.color = `rgba(0, 0, 100, ${opacity})`;
          break;
        case 'lbu':
          ret.color = `rgba(110, 200, 250, ${opacity})`;
          break;
        case '__':
          break;
        default:
          throw new Error(_ERR + `invalid color '${color}' for t: ${x}`);
      }
      switch (weight) {
        case '_':
          break;
        case void 0:
          break;
        default:
          ret.fontWeight = parseInt(weight) * 100;
      }
      return ret;
    };
    return {h, w, ih, xh, iw, xw, lef, rig, top, bot, m, p, pos, x, xg, xs, xb, ta, z, wh, ov, tov, f, op, bg, br, mt, mb, ml, mr, pt, pb, pl, pr, ttra, dis, vis, td, usel, lh, ww, bord, bort, borb, borl, borr, ls, cur, rot, scale, sh, jus, als, baurl, basi, bare};
  };

  module.exports = getBaseStyleMaps;

}).call(this);
