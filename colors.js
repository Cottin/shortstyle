// Generated by CoffeeScript 2.4.1
(function() {
  var $, RE, REstr, _, _warn, buildColors, decompose, hsvToRgb, join, mapO, match, qq, qqq, sum, test;

  join = require('ramda/src/join');

  match = require('ramda/src/match');

  sum = require('ramda/src/sum');

  test = require('ramda/src/test');

  ({mapO, $} = require('ramda-extras')); //auto_require: ramda-extras
  //auto_sugar

  [];

  qq = function(f) {
    return console.log(match(/return (.*);/, f.toString())[1], f());
  };

  qqq = function(...args) {
    return console.log(...args);
  };

  _ = function(...xs) {
    return xs;
  };

  _warn = function(msg, ret) {
    console.warn(msg);
    return ret || 'xx';
  };

  RE = /^([a-z]{2,3})(-(\d))?$/; // color
  // opacity

  REstr = "(?:[a-z]{2,3})(?:-\\d)?";

  // https://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately
  hsvToRgb = function(h, s, v) {
    var b, f, g, i, p, q, r, t;
    r = g = b = i = f = p = q = t = void 0;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - (f * s));
    t = v * (1 - ((1 - f) * s));
    switch (i % 6) {
      case 0:
        _(r = v, g = t, b = p);
        break;
      case 1:
        _(r = q, g = v, b = p);
        break;
      case 2:
        _(r = p, g = v, b = t);
        break;
      case 3:
        _(r = p, g = q, b = v);
        break;
      case 4:
        _(r = t, g = p, b = v);
        break;
      case 5:
        _(r = v, g = p, b = q);
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  };

  decompose = function(clr) {
    var ___, _opacity, base, isMatch, opacity;
    if (!clr || clr === 'undefined') {
      return [
        '!!',
        1.0 // be nice and help with undefined
      ];
    }
    if (!test(RE, clr)) {
      return ['!!', 1.0];
    }
    [isMatch, base, ___, _opacity] = match(RE, clr);
    opacity = _opacity ? parseInt(_opacity) / 10 : 1.0;
    return [base, opacity];
  };

  buildColors = function(baseColors) {
    var baseColorsRgb, baseColorsRgbStr, colors;
    baseColorsRgb = $(baseColors, mapO(function([h, s, b]) {
      return hsvToRgb(h / 360, s / 100, b / 100);
    }));
    baseColorsRgbStr = $(baseColorsRgb, mapO(join(', ')));
    colors = function(clr) {
      var base, opacity;
      [base, opacity] = decompose(clr);
      if (!baseColors[base]) {
        base = '!!';
      }
      return `rgba(${baseColorsRgbStr[base]}, ${opacity})`;
    };
    colors.forBg = function(bg) {
      var b, base, g, opacity, r;
      [base, opacity] = decompose(bg);
      // https://stackoverflow.com/a/3943023/416797
      [r, g, b] = baseColorsRgb[base];
      sum = r * 0.299 + g * 0.587 + b * 0.114;
      if (opacity < 0.4) {
        return 'bk';
      } else if (sum > 186) {
        return 'bk';
      } else {
        return 'wh';
      }
    };
    colors.hsb = function(clr) {
      var base, opacity;
      [base, opacity] = decompose(clr);
      if (!baseColors[base]) {
        return baseColors['!!'];
      }
      return baseColors[base];
    };
    return colors;
  };

  //auto_export: none_
  module.exports = {RE, REstr, hsvToRgb, decompose, buildColors};

}).call(this);
