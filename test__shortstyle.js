// Generated by CoffeeScript 2.4.1
(function() {
  var R, RE, _, __, assert, deepEq, empty, fdeepEq, last, match, max, min, props, qq, qqq, short, short2, shortstyle, styleMaps, test, type, ːlast;

  ({__, empty, last, match, max, min, props, test, type} = R = require('ramda')); //auto_require: ramda

  ({} = RE = require('ramda-extras')); //auto_require: ramda-extras

  [ːlast] = ['last']; //auto_sugar

  qq = function(f) {
    return console.log(match(/return (.*);/, f.toString())[1], f());
  };

  qqq = function(...args) {
    return console.log(...args);
  };

  _ = function(...xs) {
    return xs;
  };

  assert = require('assert');

  ({deepEq, fdeepEq} = require('testhelp')); //auto_require: testhelp

  shortstyle = require('./shortstyle');

  styleMaps = {
    _box: function() {
      return {
        backgroundColor: '#FEFFEF',
        boxShadow: '0 1px 2px 0 rgba(0,0,0,0.37)',
        borderRadius: 9
      };
    },
    _box2: function() {
      return {
        backgroundColor: 'red',
        boxShadow: '1 1px 3px 0 rgba(0,0,0,0.37)',
        borderRadius: 29
      };
    }
  };

  short = shortstyle({
    styleMaps,
    unit: function(x) {
      if (type(x) === 'Number') {
        return x + 'px';
      } else {
        return x;
      }
    }
  });

  short2 = shortstyle({
    styleMaps: {}
  });

  describe('shortstyle', function() {
    describe('edge cases', function() {
      it('empty string', function() {
        return deepEq({}, short(''));
      });
      return it('undefined string', function() {
        return deepEq({}, short(void 0));
      });
    });
    describe.skip('s_', function() {
      return it('simple case', function() {
        return deepEq(['tac', {}], short({
          s_: 'tac'
        }));
      });
    });
    describe('h = height', function() {
      it('string', function() {
        return deepEq({
          height: '87%'
        }, short('h87%'));
      });
      it('custom unit', function() {
        return deepEq({
          height: '87px'
        }, short('h87'));
      });
      return it('default unit', function() {
        return deepEq({
          height: '8.7rem'
        }, short2('h87'));
      });
    });
    describe('w = width', function() {
      return it('default unit', function() {
        return deepEq({
          width: '87px'
        }, short('w87'));
      });
    });
    describe.skip('realalistic', function() {
      // it '1', -> deepEq {width: '87px'}, short('h100% xc_c w18 p0_1 posr xrbe mr20:nl h60% xg1 ft4bu2')
      // it '2', -> deepEq {width: '87px'}, short('br50% _curp1 w40 h40')
      return it('3', function() {
        return deepEq({
          width: '87px'
        }, short('mr20:nl'));
      });
    });
    describe('m = margin', function() {
      it('custom unit', function() {
        return deepEq({
          margin: '10px'
        }, short('m10'));
      });
      it('string', function() {
        return deepEq({
          margin: '10vh'
        }, short('m10vh'));
      });
      it('default unit', function() {
        return deepEq({
          margin: '1rem'
        }, short2('m10'));
      });
      it('four', function() {
        deepEq({
          margin: '0px 10px 2px 3px'
        }, short('m0_10_2_3'));
        deepEq({
          margin: '1px 10vh 2vw 3%'
        }, short('m1_10vh_2vw_3%'));
        return deepEq({
          margin: '0.1rem 10vh 2vw 3%'
        }, short2('m1_10vh_2vw_3%'));
      });
      it('two', function() {
        return deepEq({
          margin: '1px 10vh'
        }, short('m1_10vh'));
      });
      it('mt', function() {
        return deepEq({
          marginTop: '10vh'
        }, short('mt10vh'));
      });
      it('mb', function() {
        return deepEq({
          marginBottom: '10vh'
        }, short('mb10vh'));
      });
      it('ml', function() {
        return deepEq({
          marginLeft: '10vh'
        }, short('ml10vh'));
      });
      it('mr', function() {
        return deepEq({
          marginRight: '10vh'
        }, short('mr10vh'));
      });
      it('pt', function() {
        return deepEq({
          paddingTop: '10vh'
        }, short('pt10vh'));
      });
      it('pb', function() {
        return deepEq({
          paddingBottom: '10vh'
        }, short('pb10vh'));
      });
      it('pl', function() {
        return deepEq({
          paddingLeft: '10vh'
        }, short('pl10vh'));
      });
      return it('pr', function() {
        return deepEq({
          paddingRight: '10vh'
        }, short('pr10vh'));
      });
    });
    describe('wh = whitespace', function() {
      return it('simple', function() {
        return deepEq({
          whiteSpace: 'nowrap'
        }, short('whn'));
      });
    });
    describe('pos = position', function() {
      return it('simple', function() {
        return deepEq({
          position: 'absolute'
        }, short('posa'));
      });
    });
    describe('ih = min-height', function() {
      return it('simple', function() {
        return deepEq({
          minHeight: '10px'
        }, short('ih10'));
      });
    });
    describe('iw = min-width', function() {
      return it('simple', function() {
        return deepEq({
          minWidth: '10px'
        }, short('iw10'));
      });
    });
    describe('top = top', function() {
      return it('simple', function() {
        return deepEq({
          top: '10px'
        }, short('top10'));
      });
    });
    describe('br = border-radius', function() {
      it('simple', function() {
        return deepEq({
          borderRadius: '87px'
        }, short('br87'));
      });
      return it('four', function() {
        return deepEq({
          borderRadius: '0px 10px 2px 3px'
        }, short('br0_10_2_3'));
      });
    });
    describe('xg = flexgrow', function() {
      return it('simple', function() {
        return deepEq({
          flexGrow: 2
        }, short('xg2'));
      });
    });
    describe('transform', function() {
      it('rot', function() {
        return deepEq({
          transform: 'rotate(-3deg)'
        }, short('rot-3'));
      });
      return it('rot + scale', function() {
        return deepEq({
          transform: 'rotate(-4deg) scale(1.05)'
        }, short('rot-3 scale1.05 rot-4'));
      });
    });
    // describe 'bg = backgroundColor', ->
    // 	it '1', ->
    // 		deepEq {backgroundColor: 'blue'}, short('bga1')
    describe('baurl = background-image: url(...)', function() {
      return it('1', function() {
        return deepEq({
          backgroundImage: 'url(/img/test.jpg)'
        }, short('baurl/img/test.jpg'));
      });
    });
    describe('f = font', function() {
      it('simple cases', function() {
        return fdeepEq(short('ft4bu2'), {
          fontFamily: 'Times New Roman, Times, serif',
          fontSize: '12px',
          fontWeight: 200,
          color: 'rgba(0, 0, 100, 1)'
        });
      });
      return describe('_', function() {
        it('familly', function() {
          return fdeepEq(short('ft____'), {
            fontFamily: 'Times New Roman, Times, serif'
          });
        });
        it('size', function() {
          return fdeepEq(short('f_4___'), {
            fontSize: '12px'
          });
        });
        it('color', function() {
          return fdeepEq(short('f__lbu_'), {
            color: 'rgba(110, 200, 250, 1)'
          });
        });
        it('weight', function() {
          return fdeepEq(short('f____2'), {
            fontWeight: 200
          });
        });
        return it('size + weight', function() {
          return fdeepEq(short('f_4__2'), {
            fontWeight: 200,
            fontSize: '12px'
          });
        });
      });
    });
    describe('sh = box-shadow', function() {
      return it('1', function() {
        return deepEq({
          boxShadow: '1px 2px 3px 4px rgba(0, 0, 0, 0.1)'
        }, short('sh1_2_3_4_bk-1'));
      });
    });
    describe('mix', function() {
      return it('order matters', function() {
        return fdeepEq(short('_box2 _box'), {
          backgroundColor: '#FEFFEF',
          boxShadow: '0 1px 2px 0 rgba(0,0,0,0.37)',
          borderRadius: 9
        });
      });
    });
    describe('selectors & media queries', function() {
      // it ':f', -> deepEq {':first-child': {marginRight: '10vh'}}, short('mr10vh:f')
      // it ':nl', -> deepEq {':not(ːlast-child)': {marginRight: '10vh'}}, short('mr10vh:nl')
      return it('>(f())', function() {
        var expected, res;
        res = short('ml2 <100[ml1 nl(pt5vh mr10vh)] >200[mb1 hofo(pb3 pt2)] coa(pb10)');
        expected = {
          '@media (max-width: 100px)': {
            [':not(:' + 'last-child)']: {
              paddingTop: '5vh',
              marginRight: '10vh'
            },
            marginLeft: '1px'
          },
          '@media (min-width: 200px)': {
            marginBottom: '1px',
            '@media (hover: hover)': {
              ':hover': {
                paddingBottom: '3px',
                paddingTop: '2px'
              }
            },
            ':focus': {
              paddingBottom: '3px',
              paddingTop: '2px'
            }
          },
          '@media (pointer: coarse)': {
            paddingBottom: '10px'
          },
          marginLeft: '2px'
        };
        return deepEq(expected, res);
      });
    });
    return describe.skip('prio', function() {
      return it('actual stype props should override', function() {});
    });
  });

  // eq 'teal', short('_box') style: {backgroundColor: 'teal'}})[1].backgroundColor

}).call(this);
